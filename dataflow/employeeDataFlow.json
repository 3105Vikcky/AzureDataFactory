{
	"name": "employeeDataFlow",
	"properties": {
		"description": "This is the employee dataflow for transforming employee related data so we can use it for analytics.",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "employee_data",
						"type": "DatasetReference"
					},
					"name": "employeedata",
					"description": "This is employee information source dataset"
				},
				{
					"dataset": {
						"referenceName": "recruitmentData",
						"type": "DatasetReference"
					},
					"name": "recruitmentData",
					"description": "This is employeement recruitment data source"
				},
				{
					"dataset": {
						"referenceName": "employeeEngagement",
						"type": "DatasetReference"
					},
					"name": "employeeEngagementSurvay",
					"description": "This is employee engagement Survey data source. "
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "OutputEmpData",
						"type": "DatasetReference"
					},
					"name": "outputemployeeData",
					"description": "This is the output data of the employee after performing duplicate remove transformation."
				},
				{
					"dataset": {
						"referenceName": "recruitmentDataDestiantion",
						"type": "DatasetReference"
					},
					"name": "recruitmentdatadestination",
					"description": "This is output data of the recruitment dataset after performing transformation."
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmpID as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          StartDate as string,",
				"          ExitDate as string,",
				"          Title as string,",
				"          Supervisor as string,",
				"          ADEmail as string,",
				"          BusinessUnit as string,",
				"          EmployeeStatus as string,",
				"          EmployeeType as string,",
				"          PayZone as string,",
				"          EmployeeClassificationType as string,",
				"          TerminationType as string,",
				"          TerminationDescription as string,",
				"          DepartmentType as string,",
				"          Division as string,",
				"          DOB as string,",
				"          State as string,",
				"          JobFunctionDescription as string,",
				"          GenderCode as string,",
				"          LocationCode as string,",
				"          RaceDesc as string,",
				"          MaritalDesc as string,",
				"          {Performance Score} as string,",
				"          {Current Employee Rating} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> employeedata",
				"source(output(",
				"          {Applicant ID} as string,",
				"          {Application Date} as string,",
				"          {First Name} as string,",
				"          {Last Name} as string,",
				"          Gender as string,",
				"          {Date of Birth} as string,",
				"          {Phone Number} as string,",
				"          Email as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          {Zip Code} as string,",
				"          Country as string,",
				"          {Education Level} as string,",
				"          {Years of Experience} as string,",
				"          {Desired Salary} as string,",
				"          {Job Title} as string,",
				"          Status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> recruitmentData",
				"source(output(",
				"          {Employee ID} as string,",
				"          {Survey Date} as string,",
				"          {Engagement Score} as string,",
				"          {Satisfaction Score} as string,",
				"          {Work-Life Balance Score} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> employeeEngagementSurvay",
				"employeedata aggregate(groupBy(EmpID,",
				"          FirstName,",
				"          LastName,",
				"          StartDate,",
				"          ExitDate,",
				"          Title,",
				"          Supervisor,",
				"          ADEmail,",
				"          BusinessUnit,",
				"          EmployeeStatus,",
				"          EmployeeType,",
				"          PayZone,",
				"          EmployeeClassificationType,",
				"          TerminationType,",
				"          TerminationDescription,",
				"          DepartmentType,",
				"          Division,",
				"          DOB,",
				"          State,",
				"          JobFunctionDescription,",
				"          GenderCode,",
				"          LocationCode,",
				"          RaceDesc,",
				"          MaritalDesc,",
				"          {Performance Score},",
				"          {Current Employee Rating}),",
				"     count = count()) ~> aggregate1",
				"aggregate1 select(mapColumn(",
				"          EmpID,",
				"          FirstName,",
				"          LastName,",
				"          StartDate,",
				"          ExitDate,",
				"          Title,",
				"          Supervisor,",
				"          ADEmail,",
				"          BusinessUnit,",
				"          EmployeeStatus,",
				"          EmployeeType,",
				"          PayZone,",
				"          EmployeeClassificationType,",
				"          TerminationType,",
				"          TerminationDescription,",
				"          DepartmentType,",
				"          Division,",
				"          DOB,",
				"          State,",
				"          JobFunctionDescription,",
				"          GenderCode,",
				"          LocationCode,",
				"          RaceDesc,",
				"          MaritalDesc,",
				"          {Performance Score},",
				"          {Current Employee Rating}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(ExitDate = iifNull(ExitDate, \"NA\", ExitDate),",
				"          TerminationDescription = iifNull(TerminationDescription, \"UnKnown\", TerminationDescription)) ~> derivedColumn1",
				"recruitmentData aggregate(groupBy({Applicant ID},",
				"          {Application Date},",
				"          {First Name},",
				"          {Last Name},",
				"          Gender,",
				"          {Date of Birth},",
				"          {Phone Number},",
				"          Email,",
				"          Address,",
				"          City,",
				"          State,",
				"          {Zip Code},",
				"          Country,",
				"          {Education Level},",
				"          {Years of Experience},",
				"          {Desired Salary},",
				"          {Job Title},",
				"          Status),",
				"     count = count()) ~> aggregate2",
				"aggregate2 select(mapColumn(",
				"          {Applicant ID},",
				"          {Application Date},",
				"          {First Name},",
				"          {Last Name},",
				"          Gender,",
				"          {Date of Birth},",
				"          Email,",
				"          Address,",
				"          City,",
				"          State,",
				"          {Zip Code},",
				"          Country,",
				"          {Education Level},",
				"          {Years of Experience},",
				"          {Desired Salary},",
				"          {Job Title},",
				"          Status",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as string,",
				"          Name as string,",
				"          Domain as string,",
				"          Address as string,",
				"          {Pin code} as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> outputemployeeData",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as string,",
				"          Name as string,",
				"          Domain as string,",
				"          Address as string,",
				"          {Pin code} as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> recruitmentdatadestination"
			]
		}
	}
}