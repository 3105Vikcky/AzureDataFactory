{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "centralIndiaCopyData"
		},
		"AzureBlobStorage_college_course_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_college_course'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_college_course')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_college_course_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"description": "This is first integration runtime. It is fully managed by azure.",
				"typeProperties": {
					"computeProperties": {
						"location": "South India",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 10,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime2')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"description": "This is a self-hosted integration runtime. This is mainly use for migrating the on premises data to the cloud. It is bridge between the local network and cloud network. The data flows is not supported in the self hosted IR for that copy the data in cloud storage service  as dta stage area then use azure integration for data flows.  ",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InputData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is an input dataset",
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_college_course",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "CollegeCourseList.xls",
						"container": "collegecontainer"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_college_course')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputEmpData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_college_course",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "destination"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Domain",
						"type": "String"
					},
					{
						"name": "Address",
						"type": "String"
					},
					{
						"name": "Pin code",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_college_course')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StudentAddresDataSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_college_course",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "StudentAddress.xlsx",
						"container": "collegecontainer"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_college_course')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StudentAddressDataSource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_college_course",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "StudentAddress.xlsx",
						"container": "collegecontainer"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Address",
						"type": "String"
					},
					{
						"name": "Pin code",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_college_course')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StudentInfoDataSource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_college_course",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "StudentInfo",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "StudentInfo.xlsx",
						"container": "collegecontainer"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Domain",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_college_course')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/collegecousredestination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_college_course",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "collegecourse",
						"folderPath": "output",
						"container": "destination"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_college_course')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employee_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_college_course",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employee_data.csv",
						"container": "collegecontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpID",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "StartDate",
						"type": "String"
					},
					{
						"name": "ExitDate",
						"type": "String"
					},
					{
						"name": "Title",
						"type": "String"
					},
					{
						"name": "Supervisor",
						"type": "String"
					},
					{
						"name": "ADEmail",
						"type": "String"
					},
					{
						"name": "BusinessUnit",
						"type": "String"
					},
					{
						"name": "EmployeeStatus",
						"type": "String"
					},
					{
						"name": "EmployeeType",
						"type": "String"
					},
					{
						"name": "PayZone",
						"type": "String"
					},
					{
						"name": "EmployeeClassificationType",
						"type": "String"
					},
					{
						"name": "TerminationType",
						"type": "String"
					},
					{
						"name": "TerminationDescription",
						"type": "String"
					},
					{
						"name": "DepartmentType",
						"type": "String"
					},
					{
						"name": "Division",
						"type": "String"
					},
					{
						"name": "DOB",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "JobFunctionDescription",
						"type": "String"
					},
					{
						"name": "GenderCode",
						"type": "String"
					},
					{
						"name": "LocationCode",
						"type": "String"
					},
					{
						"name": "RaceDesc",
						"type": "String"
					},
					{
						"name": "MaritalDesc",
						"type": "String"
					},
					{
						"name": "Performance Score",
						"type": "String"
					},
					{
						"name": "Current Employee Rating",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_college_course')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/filterdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_college_course",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "output",
						"container": "destination"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_college_course')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/joinStudentDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_college_course",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "destination"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_college_course')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/recruitmentData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_college_course",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "recruitment_data.csv",
						"container": "collegecontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Applicant ID",
						"type": "String"
					},
					{
						"name": "Application Date",
						"type": "String"
					},
					{
						"name": "First Name",
						"type": "String"
					},
					{
						"name": "Last Name",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Date of Birth",
						"type": "String"
					},
					{
						"name": "Phone Number",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "Address",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "Zip Code",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Education Level",
						"type": "String"
					},
					{
						"name": "Years of Experience",
						"type": "String"
					},
					{
						"name": "Desired Salary",
						"type": "String"
					},
					{
						"name": "Job Title",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_college_course')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/recruitmentDataDestiantion')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_college_course",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "destination"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Domain",
						"type": "String"
					},
					{
						"name": "Address",
						"type": "String"
					},
					{
						"name": "Pin code",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_college_course')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employeeEngagement')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_college_course",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "employee_engagement_survey_data.csv",
						"container": "collegecontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Employee ID",
						"type": "String"
					},
					{
						"name": "Survey Date",
						"type": "String"
					},
					{
						"name": "Engagement Score",
						"type": "String"
					},
					{
						"name": "Satisfaction Score",
						"type": "String"
					},
					{
						"name": "Work-Life Balance Score",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_college_course')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employeeEngagementDestianation')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_college_course",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "destination"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Domain",
						"type": "String"
					},
					{
						"name": "Address",
						"type": "String"
					},
					{
						"name": "Pin code",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_college_course')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/collegecourse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is my first pipeline which copies data from source storage account to sink (destination) storage account.\n",
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "InputData",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "collegecousredestination",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputData')]",
				"[concat(variables('factoryId'), '/datasets/collegecousredestination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/StudentInfoSource')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This Student Information Dataset.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "StudentInfoDataSource1",
								"type": "DatasetReference"
							},
							"name": "StudentInfo",
							"description": "This is first student info dataset"
						},
						{
							"dataset": {
								"referenceName": "StudentAddressDataSource",
								"type": "DatasetReference"
							},
							"name": "StudentAddress",
							"description": "This is Student address information dataset"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "joinStudentDataset",
								"type": "DatasetReference"
							},
							"name": "DestinationofStudentJoin",
							"description": "This is destination dataset to store the transform data after joining the two dataset"
						}
					],
					"transformations": [
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as string,",
						"          Name as string,",
						"          Domain as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> StudentInfo",
						"source(output(",
						"          ID as string,",
						"          Address as string,",
						"          {Pin code} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> StudentAddress",
						"StudentInfo, StudentAddress join(StudentInfo@ID == StudentAddress@ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DestinationofStudentJoin"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/StudentInfoDataSource1')]",
				"[concat(variables('factoryId'), '/datasets/StudentAddressDataSource')]",
				"[concat(variables('factoryId'), '/datasets/joinStudentDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employeeDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is the employee dataflow for transforming employee related data so we can use it for analytics.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee_data",
								"type": "DatasetReference"
							},
							"name": "employeedata",
							"description": "This is employee information source dataset"
						},
						{
							"dataset": {
								"referenceName": "recruitmentData",
								"type": "DatasetReference"
							},
							"name": "recruitmentData",
							"description": "This is employeement recruitment data source"
						},
						{
							"dataset": {
								"referenceName": "employeeEngagement",
								"type": "DatasetReference"
							},
							"name": "employeeEngagementSurvay",
							"description": "This is employee engagement Survey data source. "
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OutputEmpData",
								"type": "DatasetReference"
							},
							"name": "outputemployeeData",
							"description": "This is the output data of the employee after performing duplicate remove transformation."
						},
						{
							"dataset": {
								"referenceName": "recruitmentDataDestiantion",
								"type": "DatasetReference"
							},
							"name": "recruitmentdatadestination",
							"description": "This is output data of the recruitment dataset after performing transformation."
						},
						{
							"dataset": {
								"referenceName": "employeeEngagementDestianation",
								"type": "DatasetReference"
							},
							"name": "employeeEngagementDestination"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate2"
						},
						{
							"name": "select2"
						},
						{
							"name": "aggregate3"
						},
						{
							"name": "select3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpID as string,",
						"          FirstName as string,",
						"          LastName as string,",
						"          StartDate as string,",
						"          ExitDate as string,",
						"          Title as string,",
						"          Supervisor as string,",
						"          ADEmail as string,",
						"          BusinessUnit as string,",
						"          EmployeeStatus as string,",
						"          EmployeeType as string,",
						"          PayZone as string,",
						"          EmployeeClassificationType as string,",
						"          TerminationType as string,",
						"          TerminationDescription as string,",
						"          DepartmentType as string,",
						"          Division as string,",
						"          DOB as string,",
						"          State as string,",
						"          JobFunctionDescription as string,",
						"          GenderCode as string,",
						"          LocationCode as string,",
						"          RaceDesc as string,",
						"          MaritalDesc as string,",
						"          {Performance Score} as string,",
						"          {Current Employee Rating} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeedata",
						"source(output(",
						"          {Applicant ID} as string,",
						"          {Application Date} as string,",
						"          {First Name} as string,",
						"          {Last Name} as string,",
						"          Gender as string,",
						"          {Date of Birth} as string,",
						"          {Phone Number} as string,",
						"          Email as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          {Zip Code} as string,",
						"          Country as string,",
						"          {Education Level} as string,",
						"          {Years of Experience} as string,",
						"          {Desired Salary} as string,",
						"          {Job Title} as string,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> recruitmentData",
						"source(output(",
						"          {Employee ID} as string,",
						"          {Survey Date} as string,",
						"          {Engagement Score} as string,",
						"          {Satisfaction Score} as string,",
						"          {Work-Life Balance Score} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeeEngagementSurvay",
						"employeedata aggregate(groupBy(EmpID,",
						"          FirstName,",
						"          LastName,",
						"          StartDate,",
						"          ExitDate,",
						"          Title,",
						"          Supervisor,",
						"          ADEmail,",
						"          BusinessUnit,",
						"          EmployeeStatus,",
						"          EmployeeType,",
						"          PayZone,",
						"          EmployeeClassificationType,",
						"          TerminationType,",
						"          TerminationDescription,",
						"          DepartmentType,",
						"          Division,",
						"          DOB,",
						"          State,",
						"          JobFunctionDescription,",
						"          GenderCode,",
						"          LocationCode,",
						"          RaceDesc,",
						"          MaritalDesc,",
						"          {Performance Score},",
						"          {Current Employee Rating}),",
						"     count = count()) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          EmpID,",
						"          FirstName,",
						"          LastName,",
						"          StartDate,",
						"          ExitDate,",
						"          Title,",
						"          Supervisor,",
						"          ADEmail,",
						"          BusinessUnit,",
						"          EmployeeStatus,",
						"          EmployeeType,",
						"          PayZone,",
						"          EmployeeClassificationType,",
						"          TerminationType,",
						"          TerminationDescription,",
						"          DepartmentType,",
						"          Division,",
						"          DOB,",
						"          State,",
						"          JobFunctionDescription,",
						"          GenderCode,",
						"          LocationCode,",
						"          RaceDesc,",
						"          MaritalDesc,",
						"          {Performance Score},",
						"          {Current Employee Rating}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(ExitDate = iifNull(ExitDate, \"NA\", ExitDate),",
						"          TerminationDescription = iifNull(TerminationDescription, \"UnKnown\", TerminationDescription)) ~> derivedColumn1",
						"recruitmentData aggregate(groupBy({Applicant ID},",
						"          {Application Date},",
						"          {First Name},",
						"          {Last Name},",
						"          Gender,",
						"          {Date of Birth},",
						"          {Phone Number},",
						"          Email,",
						"          Address,",
						"          City,",
						"          State,",
						"          {Zip Code},",
						"          Country,",
						"          {Education Level},",
						"          {Years of Experience},",
						"          {Desired Salary},",
						"          {Job Title},",
						"          Status),",
						"     count = count()) ~> aggregate2",
						"aggregate2 select(mapColumn(",
						"          {Applicant ID},",
						"          {Application Date},",
						"          {First Name},",
						"          {Last Name},",
						"          Gender,",
						"          {Date of Birth},",
						"          Email,",
						"          Address,",
						"          City,",
						"          State,",
						"          {Zip Code},",
						"          Country,",
						"          {Education Level},",
						"          {Years of Experience},",
						"          {Desired Salary},",
						"          {Job Title},",
						"          Status",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"employeeEngagementSurvay aggregate(groupBy({Employee ID},",
						"          {Survey Date},",
						"          {Engagement Score},",
						"          {Satisfaction Score},",
						"          {Work-Life Balance Score}),",
						"     count = count()) ~> aggregate3",
						"aggregate3 select(mapColumn(",
						"          {Employee ID},",
						"          {Survey Date},",
						"          {Engagement Score},",
						"          {Satisfaction Score},",
						"          {Work-Life Balance Score}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as string,",
						"          Name as string,",
						"          Domain as string,",
						"          Address as string,",
						"          {Pin code} as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> outputemployeeData",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as string,",
						"          Name as string,",
						"          Domain as string,",
						"          Address as string,",
						"          {Pin code} as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> recruitmentdatadestination",
						"select3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID as string,",
						"          Name as string,",
						"          Domain as string,",
						"          Address as string,",
						"          {Pin code} as string",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> employeeEngagementDestination"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee_data')]",
				"[concat(variables('factoryId'), '/datasets/recruitmentData')]",
				"[concat(variables('factoryId'), '/datasets/employeeEngagement')]",
				"[concat(variables('factoryId'), '/datasets/OutputEmpData')]",
				"[concat(variables('factoryId'), '/datasets/recruitmentDataDestiantion')]",
				"[concat(variables('factoryId'), '/datasets/employeeEngagementDestianation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/studentFilter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This dataflow is used for filter the student data on given condition.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "StudentInfoDataSource1",
								"type": "DatasetReference"
							},
							"name": "StudenInfosource2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "filterdataset",
								"type": "DatasetReference"
							},
							"name": "tranformdata2"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as string,",
						"          Name as string,",
						"          Domain as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> StudenInfosource2",
						"StudenInfosource2 filter(ID>='3' && Domain=='Java Developer') ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> tranformdata2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/StudentInfoDataSource1')]",
				"[concat(variables('factoryId'), '/datasets/filterdataset')]"
			]
		}
	]
}